import UIKit
import Foundation

// MARK: - Part 1.1: Product
struct Product {
	let id: String
	let name: String
	let price: Double
	let category: Category
	let description: String
	
	enum Category{
		case electronics, clothing, books
	}
	
	var displayPrice: String {
		"$\(String(format : "%.2f", price))"
	}
	
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ü–µ–Ω—ã
	init?(name: String, price: Double, category: Category, description: String) {
		guard price > 0 else {
			print("Error! Price must be greater than 0")
			return nil
		}
		self.id = UUID().uuidString // –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ id
		self.name = name
		self.price = price
		self.category = category
		self.description = description
	}
}

// MARK: - Part 1.2: CartItem
struct CartItem {
	var product: Product
	private(set) var quantity: Int // –∑–∞—â–∏—â–∞–µ–º –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–Ω–∞—Ä—É–∂–∏
	
	var subTotal: Double {
		product.price * Double(quantity)
	}
	
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
	init(product: Product, quantity: Int) {
			if quantity > 0 {
				self.product = product
				self.quantity = quantity
			} else {
				print("Error! Quantity must be greater than 0")
				self.product = product
				self.quantity = 1
			}
		}
	
	// –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
	mutating func updateQuantity(_ newQuantity: Int) {
		   if newQuantity > 0 {
			   quantity = newQuantity
		   } else {
			   print("Error! Quantity must be greater than 0")
		   }
	}

	// –ú–µ—Ç–æ–¥ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–ª
	mutating func increaseQuantity(by amount: Int) {
		   if amount > 0 {
			   quantity += amount
		   } else {
			   print("Error! You can't add a negative quantity")
		   }
	}
}
//MARK: - Testing 1
//if let product = Product(name: "Phone", price: 1000, category: .electronics, description: "iPhone17") {
//	var item = CartItem(product: product, quantity: 1)
//	print("Subtotal: ", item.subTotal)
//	item.increaseQuantity(by: 2)
//	print("New subtotal: ", item.subTotal)
//}

// MARK: - DiscountType(for bonus task 2)
enum DiscountType {
	case save10   // —Å–∫–∏–¥–∫–∞ 10%
	case save20   // —Å–∫–∏–¥–∫–∞ 20%
	case none     // –±–µ–∑ —Å–∫–∏–¥–∫–∏
}

// MARK: - Part 2: ShoppingCart Class
class ShoppingCart {
	private(set) var items: [CartItem] = []
	//var discountCode: String?
	var discount: DiscountType = .none
	
	// –ü—É—Å—Ç–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä
	init() {}
	
	// –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
	func addItem(product: Product, quantity: Int = 1) {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ
		if let index = items.firstIndex(where: { $0.product.id == product.id }) {
			// –ï—Å–ª–∏ –µ—Å—Ç—å ‚Äî —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
			items[index].increaseQuantity(by: quantity)
		} else {
			// –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π CartItem
			let newItem = CartItem(product: product, quantity: quantity)
			items.append(newItem)
		}
	}
	
	// –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –ø–æ ID
	func removeItem(productId: String) {
		items.removeAll { $0.product.id == productId }
	}
	
	// –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
	func updateItemQuantity(productId: String, quantity: Int) {
		if let index = items.firstIndex(where: { $0.product.id == productId }) {
			if quantity > 0 {
				items[index].updateQuantity(quantity)
			} else {
				// –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ 0 ‚Äî —É–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä
				items.remove(at: index)
			}
		}
	}
	
	// –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
	func clearCart() {
		items.removeAll()
	}
	
	// –ü–æ–¥—Å—á—ë—Ç –æ–±—â–µ–π —Å—É–º–º—ã –±–µ–∑ —Å–∫–∏–¥–∫–∏
	var subtotal: Double {
		items.reduce(0) { $0 + $1.subTotal }
	}
	
	// –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–∏–¥–∫—É
//	var discountAmount: Double {
//		switch discountCode {
//		case "SAVE10": return subtotal * 0.1
//		case "SAVE20": return subtotal * 0.2
//		default: return 0
//		}
//	}
	var discountAmount: Double {
		switch discount {
		case .save10:
			return subtotal * 0.1
		case .save20:
			return subtotal * 0.2
		case .none:
			return 0
		}
	}
	
	// –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞
	var total: Double {
		subtotal - discountAmount
	}
	
	// –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
	var itemCount: Int {
		items.reduce(0) { $0 + $1.quantity }
	}
	
	// –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø—É—Å—Ç–∞—è –ª–∏ –∫–æ—Ä–∑–∏–Ω–∞
	var isEmpty: Bool {
		items.isEmpty
	}
}

// MARK: - Testing 2
//if let phone = Product(name: "iPhone 14", price: 1000, category: .electronics, description: "Apple smartphone"),
//   let book = Product(name: "Swift Guide", price: 30, category: .books, description: "Programming book") {
//	
//	let cart = ShoppingCart()
//	cart.addItem(product: phone, quantity: 1)
//	cart.addItem(product: book, quantity: 2)
//	
//	print("Subtotal:", cart.subtotal)     // 1060
//	print("Items in cart:", cart.itemCount) // 3
//	
//	cart.discountCode = "SAVE10"
//	print("Total with discount:", cart.total) // 954
//	
//	cart.updateItemQuantity(productId: phone.id, quantity: 3)
//	print("Updated subtotal:", cart.subtotal)
//	
//	cart.removeItem(productId: book.id)
//	print("Items left:", cart.itemCount)
//}

// MARK: - Part 3.1: Address
struct Address {
	var street: String
	var city: String
	var zipCode: String
	var country: String
	
	// –í—ã—á–∏—Å–ª—è–µ–º–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ ‚Äî —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∞–¥—Ä–µ—Å –≤ —É–¥–æ–±–Ω—ã–π –≤–∏–¥
	var formattedAddress: String {
		"""
		\(street)
		\(city), \(zipCode)
		\(country)
		"""
	}
}

// MARK: - Part 3.2: Order
struct Order {
	let orderId: String
	let items: [CartItem]
	let subtotal: Double // –°—É–º–º–∞ –±–µ–∑ —Å–∫–∏–¥–∫–∏
	let discountAmount: Double
	let total: Double // –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –ø–æ—Å–ª–µ —Å–∫–∏–¥–∫–∏
	let timestamp: Date
	let shippingAddress: Address
	
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
	init(from cart: ShoppingCart, shippingAddress: Address) {
		self.orderId = UUID().uuidString
		self.items = cart.items
		self.subtotal = cart.subtotal
		self.discountAmount = cart.discountAmount
		self.total = cart.total
		self.timestamp = Date()
		self.shippingAddress = shippingAddress
	}
	
	// –í—ã—á–∏–ª—è–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
	var itemCount: Int {
		items.reduce(0) { $0 + $1.quantity }
	}
}
// MARK: - Testing 3
//if let phone = Product(name: "iPhone 14", price: 1000, category: .electronics, description: "Apple smartphone"),
//   let book = Product(name: "Swift Programming", price: 30, category: .books, description: "Learn Swift easily") {
//
//	// –°–æ–∑–¥–∞—ë–º –∫–æ—Ä–∑–∏–Ω—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã
//	let cart = ShoppingCart()
//	cart.addItem(product: phone, quantity: 1)
//	cart.addItem(product: book, quantity: 2)
//	
//	// –î–æ–±–∞–≤–ª—è–µ–º —Å–∫–∏–¥–∫—É
//	cart.discountCode = "SAVE10"
//	
//	print("üõí Cart before checkout:")
//	print("- Items count:", cart.itemCount)
//	print("- Subtotal:", cart.subtotal)
//	print("- Discount:", cart.discountAmount)
//	print("- Total:", cart.total)
//	print("--------------------------------")
//	
//	// –°–æ–∑–¥–∞—ë–º –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
//	let address = Address(
//		street: "123 Main Street",
//		city: "Almaty",
//		zipCode: "050000",
//		country: "Kazakhstan"
//	)
//	
//	// –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—Ä–∑–∏–Ω—ã –∏ –∞–¥—Ä–µ—Å–∞
//	let order = Order(from: cart, shippingAddress: address)
//	
//	print("üì¶ Order created:")
//	print("- Order ID:", order.orderId)
//	print("- Date:", order.timestamp)
//	print("- Items in order:", order.itemCount)
//	print("- Subtotal:", order.subtotal)
//	print("- Discount:", order.discountAmount)
//	print("- Total:", order.total)
//	print("- Shipping address:\n\(order.shippingAddress.formattedAddress)")
//}

// MARK: - User (Bonus 1)
class User {
	let userId: String
	let name: String
	let email: String
	private(set) var orderHistory: [Order] = []
	
	init(name: String, email: String) {
		self.userId = UUID().uuidString
		self.name = name
		self.email = email
	}
	
	// –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ –∏—Å—Ç–æ—Ä–∏—é
	func placeOrder(_ order: Order) {
		orderHistory.append(order)
	}
	
	// –ü–æ–¥—Å—á—ë—Ç –æ–±—â–µ–π —Å—É–º–º—ã –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö –¥–µ–Ω–µ–≥
	var totalSpent: Double {
		orderHistory.reduce(0) { $0 + $1.total }
	}
}


// MARK: - Part 4: Testing & Demonstrations
let laptop = Product(name: "MacBook Air M2", price: 1200, category: .electronics, description: "Apple laptop")
let book = Product(name: "Swift Programming", price: 35, category: .books, description: "Learn Swift")
let headphones = Product(name: "AirPods Pro", price: 250, category: .electronics, description: "Wireless earbuds")

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏—Å—å
let cart = ShoppingCart()
if let laptop = laptop, let book = book, let headphones = headphones {

	//–î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω—É
	cart.addItem(product: laptop, quantity: 1)
	cart.addItem(product: book, quantity: 2)
	
	//–î–æ–±–∞–≤–ª—è–µ–º —Ç–æ –∂–µ —Å–∞–º–æ–µ –µ—â–µ —Ä–∞–∑(–¥–æ–ª–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
	cart.addItem(product: laptop, quantity: 1)
	print("Laptop quantity increased (should be 2).")
	
	//–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—á–∏—Å–ª–µ–∏—è –∫–æ—Ä–∑–∏–Ω—ã
	print("Subtotal: \(cart.subtotal)")       // –°—É–º–º–∞ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
	print("Item count: \(cart.itemCount)")    // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
	
	//–ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫—É
//	cart.discountCode = "SAVE10"
	cart.discount = .save10
	print("Total with discount: \(cart.total)")  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∫–∏–¥–∫–∞ —Å—Ä–∞–±–æ—Ç–∞–ª–∞
	
	//–£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä
	cart.removeItem(productId: book.id)
	print("Removed book. Cart now has \(cart.itemCount) items.")
	
	//–î–µ–º–æ–Ω—Å—Ç—Ä—Ü–∏—è REFERENCE TYPE –ø–æ–≤–µ–¥–µ–Ω–∏—è (class)
	func modifyCart(_ cart: ShoppingCart) {
		cart.addItem(product: headphones, quantity: 1)
	}
	modifyCart(cart)
	print("After modifyCart(), item count:", cart.itemCount)
	//–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ class ‚Äî —Å—Å—ã–ª–æ—á–Ω—ã–π —Ç–∏–ø (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –∫–æ—Ä–∑–∏–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å)
	
	//–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è VALUE TYPE –ø–æ–≤–µ–¥–µ–Ω–∏—è (struct)
	var item1 = CartItem(product: laptop, quantity: 1)
	var item2 = item1
	item2.updateQuantity(5)
	print("item1 quantity:", item1.quantity)  // 1
	print("item2 quantity:", item2.quantity)  // 5
	//–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ struct ‚Äî —Ç–∏–ø-–∑–Ω–∞—á–µ–Ω–∏–µ (–∫–æ–ø–∏—è –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª)
	
	//–°–æ–∑–¥–∞—ë–º –∞–¥—Ä–µ–µ—Å –∏ –∑–∞–∫–∞–∑ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
	let user = User(name: "Ariana", email: "ariana@example.com") // —ç—Ç–æ—Ç user –±—Ñ–ª —Å–æ–∑–¥–∞–Ω –¥–ª—è –±–æ–Ω—É—Å —Ç–∞—Å–∫–∞1
	let address = Address(street: "123 Main St", city: "Almaty", zipCode: "050000", country: "Kazakhstan")
	let order = Order(from: cart, shippingAddress: address)

	// –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –≤—ã–≤–æ–¥–∏–º(–±–æ–Ω—É—Å —Ç–∞—Å–∫1)
	user.placeOrder(order)
	print("-----------------------------------")
	print("\nüë§ User:", user.name)
	print("üßæ Orders in history:", user.orderHistory.count)
	print("üí∞ Total spent:", user.totalSpent)
	print("\n-----------------------------------")
	
	//–ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
	cart.clearCart()
	print("üßæ Order items count:", order.itemCount) // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å > 0
	print("üõí Cart items count:", cart.itemCount)   // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 0
	//–í–∏–¥–∏–º, —á—Ç–æ Order —Ö—Ä–∞–Ω–∏—Ç –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—É—é –∫–æ–ø–∏—é –∫–æ—Ä–∑–∏–Ω—ã
}
